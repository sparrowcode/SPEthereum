import XCTest
import BigInt
@testable import Ethereum

class ABIEncoderTests: XCTestCase {

    func testEncodeMethod() throws {
        
        let params = [
            SmartContractParam(name: "x", type: .uint(32), value: BigUInt(69)),
            SmartContractParam(name: "y", type: .bool, value: true)
        ]
        
        let method = SmartContractMethod(name: "baz", params: params)
        
        let bytes = try ABIEncoder.encode(method: method)
        
        let stringValue = String(bytes: bytes)
        
        let rightValue = "cdcd77c000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
        
        XCTAssertEqual(stringValue, rightValue)
    }

    func testEncodeMethod2() throws {
        
        let params = [
            SmartContractParam(name: "memory", type: .array(type: .bytes(3), length: 2), value: ["abc".data(using: .utf8)!, "def".data(using: .utf8)!])
        ]
        
        let method = SmartContractMethod(name: "bar", params: params)
        
        let bytes = try ABIEncoder.encode(method: method)
        
        let stringValue = String(bytes: bytes)
        
        let rightValue = "fce353f661626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000"
        
        XCTAssertEqual(stringValue, rightValue)
    }
    
    func testEncodeMethod3() throws {
        
        let params = [
            SmartContractParam(name: "memory", type: .bytes(), value: "dave".data(using: .utf8)!),
            SmartContractParam(name: "", type: .bool, value: true),
            SmartContractParam(name: "", type: .array(type: .uint()), value: [1, 2, 3])
        ]
        
        let method = SmartContractMethod(name: "sam", params: params)
        
        let bytes = try ABIEncoder.encode(method: method)
        
        let stringValue = String(bytes: bytes)
        
        let rightValue = "a5643bf20000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
        
        XCTAssertEqual(stringValue, rightValue)
    }
    
    func testEncodeMethod4() throws {
        
        let params = [
            SmartContractParam(name: "", type: .uint(), value: 0x123),
            SmartContractParam(name: "", type: .array(type: .uint(32)), value: [0x456, 0x789]),
            SmartContractParam(name: "", type: .bytes(10), value: "1234567890".data(using: .utf8)!),
            SmartContractParam(name: "", type: .bytes(), value: "Hello, world!".data(using: .utf8)!)
        ]
        
        let method = SmartContractMethod(name: "f", params: params)
        
        let bytes = try ABIEncoder.encode(method: method)
        
        let stringValue = String(bytes: bytes)
        
        let rightValue = "8be6524600000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000"
        
        XCTAssertEqual(stringValue, rightValue)
    }
    
    func testEncodeMethod5() throws {
        
        let params = [
            SmartContractParam(name: "", type: .array(type: .array(type: .uint())), value: [[1, 2], [3]]),
            SmartContractParam(name: "", type: .array(type: .string), value: ["one", "two", "three"])
        ]
        
        let method = SmartContractMethod(name: "g", params: params)
        
        let bytes = try ABIEncoder.encode(method: method)
        
        let stringValue = String(bytes: bytes)
        
        let rightValue = "2289b18c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"
        
        let _ = "2289b18c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001ae0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0"
        
        XCTAssertEqual(stringValue, rightValue)
        
    }
}
