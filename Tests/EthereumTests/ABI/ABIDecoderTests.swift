import XCTest
import BigInt
@testable import Ethereum

class ABIDecoderTests: XCTestCase {

    
    func testDecodeResponse() throws {
        
        let responseAbiData = "00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001"
        
        let encodedValues: [AnyHashable] = [BigUInt(69), true]
        
        let decodedValues = try ABIDecoder.decode(responseAbiData, to: [.uint(), .bool]) as! [Any]
        
        XCTAssertEqual(decodedValues[0] as! BigUInt, encodedValues[0] as! BigUInt)
        XCTAssertEqual(decodedValues[1] as! Bool, encodedValues[1] as! Bool)
    }
    
    func testDecodeResponse2() throws {
        
        let responseAbiData = "61626300000000000000000000000000000000000000000000000000000000006465660000000000000000000000000000000000000000000000000000000000"
        
        let encodedValues: [AnyHashable] = ["abc".data(using: .utf8)!, "def".data(using: .utf8)!]
        
        let decodedValues = try ABIDecoder.decode(responseAbiData, to: .array(type: .bytes(3), length: 2)) as! [AnyHashable]
        
        XCTAssertEqual(encodedValues, decodedValues)
    }
    
    func testDecodeResponse3() throws {
        
        let responseAbiData = "0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000464617665000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003"
        
        let encodedValues: [Any] = ["dave".data(using: .utf8)!, true, [BigUInt(1), BigUInt(2), BigUInt(3)]]
        
        let decodedValues = try ABIDecoder.decode(responseAbiData, to: [.bytes(), .bool, .array(type: .uint())]) as! [Any]
        
        
        XCTAssertEqual(decodedValues[0] as! Data, encodedValues[0] as! Data)
        XCTAssertEqual(decodedValues[1] as! Bool, encodedValues[1] as! Bool)
        XCTAssertEqual(decodedValues[2] as! [BigUInt], encodedValues[2] as! [BigUInt])
        
    }
    
    func testDecodeResponse4() throws {
        
        let responseAbiData = "00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000080313233343536373839300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004560000000000000000000000000000000000000000000000000000000000000789000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000"
        
        let encodedValues: [Any] = [BigUInt(291), [UInt32(1110), UInt32(1929)], "1234567890".data(using: .utf8)!, "Hello, world!".data(using: .utf8)!]
        
        let decodedValues = try ABIDecoder.decode(responseAbiData, to: [.uint(), .array(type: .uint(32)), .bytes(10), .bytes()]) as! [Any]
        
        XCTAssertEqual(decodedValues[0] as! BigUInt, encodedValues[0] as! BigUInt)
        XCTAssertEqual(decodedValues[1] as! [UInt32], encodedValues[1] as! [UInt32])
        XCTAssertEqual(decodedValues[2] as! Data, encodedValues[2] as! Data)
        XCTAssertEqual(decodedValues[3] as! Data, encodedValues[3] as! Data)
    }
    
    func testDecodeResponse5() throws {
        
        let responseAbiData = "000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000036f6e650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000374776f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000057468726565000000000000000000000000000000000000000000000000000000"
        
        let encodedValues: [Any] = [[[BigUInt(1), BigUInt(2)], BigUInt(3)], ["one", "two", "three"]]
        
        let decodedValues = try ABIDecoder.decode(responseAbiData, to: [.array(type: .array(type: .uint())), .array(type: .string)]) as! [Any]
        
        print(decodedValues)
//        XCTAssertEqual(decodedValues[0] as! BigUInt, encodedValues[0] as! BigUInt)
//        XCTAssertEqual(decodedValues[1] as! [UInt32], encodedValues[1] as! [UInt32])
//        XCTAssertEqual(decodedValues[2] as! Data, encodedValues[2] as! Data)
//        XCTAssertEqual(decodedValues[3] as! Data, encodedValues[3] as! Data)
    }
    
}
